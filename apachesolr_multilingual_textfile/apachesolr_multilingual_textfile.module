<?php
// $Id$

function apachesolr_multilingual_textfile_node_info() {
  return array(
    'apachesolr_multilingual_textfile' => array(
      'name' => 'Apache Solr Multilingual Textfile',
      'module' => 'apachesolr_multilingual_textfile',
      'description' => 'Create / edit a apache solr textfile (stopwords.txt, synonyms.txt, ...)',
      'title_label' => 'Create / edit a apache solr textfile (stopwords.txt, synonyms.txt, ...)',
      'has_body' => TRUE,
      'promote' => FALSE,
  )
  );
}

function apachesolr_multilingual_textfile_form(&$node, $form_state) {
  $type = node_get_types('type', $node);
  $node->status = 0;
  $form['title'] = array(
    '#type'=> 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
  );

  $filenames = array('stopwords.txt'=>'stopwords.txt','synonyms.txt'=>'synonyms.txt', 'protwords.txt'=>'protwords.txt', 'compoundwords.txt' => 'compoundwords.txt');

  $form['filename'] = array(
    '#type'=> 'select',
    '#title' => t('select a text type'),
    '#required' => TRUE,
    '#options' => $filenames,
  	'#default_value' => $node->filename,
  );


  $form['body'] = array(
    '#type' => 'textarea',
    '#title' => t('Apache Solr Textfile'),
    '#rows' => 20,
    '#required' => TRUE,
    '#default_value' => $node->body,
  );

  return $form;
}

function apachesolr_multilingual_textfile_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  global $user;

  if ('apachesolr_multilingual_textfile' == $node->type) {
    switch ($op) {
      case 'load':
        $node->filename = db_result(db_query("SELECT filename FROM {apachesolr_multilingual_textfiles} WHERE (nid = %d) and (vid = %d)", $node->nid, $node->vid));
        break;

      case 'presave':
        // prohibit publishing
        $node->status = 0;
        break;

      case 'insert':
        $item = array('nid' => $node->nid, 'vid' => $node->vid, 'filename' => $node->filename);
        drupal_write_record('apachesolr_multilingual_textfiles', $item);
        break;

      case 'delete':
        // delete complete node therefore no revision control
        db_query("DELETE FROM {apachesolr_multilingual_textfiles} WHERE nid = %d", $node->nid);
        break;

      case 'update':
        $item = array('nid' => $node->nid, 'vid' => $node->vid, 'filename' => $node->filename);
        if ($node->revision) {
          drupal_write_record('apachesolr_multilingual_textfiles', $item);
        }
        else {
          drupal_write_record('apachesolr_multilingual_textfiles', $item, array('nid', 'vid'));
        }
        break;

      case 'view':
        $node->content['filename'] = array('#value' => $node->filename, '#weight' => -1);
        // TODO utfbody should be removed here and be aplied before file download. currently it's only debug
        $node->content['utfbody'] = array('#value' => apachesolr_multilingual_textfile_isolatin1accent_filter($node->content['body']['#value']), '#weight' => 55);
        break;
    }
  }
}

function apachesolr_multilingual_textfile_isolatin1accent_filter($text) {
  $mapping_source_path = dirname(__FILE__).'/../resources/';
  $mappings = file_get_contents($mapping_source_path.'mapping-ISOLatin1Accent.txt');
  $mappings = preg_replace('/\s*$/','', $mappings);
  $mappings = preg_replace('/^\s*/','', $mappings);
  $lines = explode("\n",$mappings);
  foreach($lines as $i=>$line){
    if (substr($line,0,1)=='#' || trim($line)== '') {
      unset($lines[$i]);
    }
  }
  $sr = array('"',' ');
  foreach($lines as $line){
    $line = str_replace($sr,'',$line);
    $mappings = explode("=>", $line);

    $text = preg_replace( "@\\x{".str_replace('\u','',$mappings[0])."}@u", $mappings[1], $text);

//    $enc_current = mb_regex_encoding();
//    mb_regex_encoding('UTF-8');
//    $text = mb_ereg_replace( "\\x{".str_replace('\u','',$mappings[0])."}", $mappings[1], $text);
//    mb_regex_encoding($enc_current);
  }
  return $text;
}
