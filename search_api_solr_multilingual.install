<?php

/**
 * @file
 * Install, update, and uninstall functions for Search API Multilingual Solr.
 */

/**
 * Implements hook_requirements().
 */
function search_api_solr_multilingual_requirements($phase) {
  $requirements = [];

  if ($phase == 'runtime') {

    $storage = \Drupal::entityTypeManager()->getStorage('search_api_server');
    /** @var \Drupal\search_api\ServerInterface[] $servers */
    if ($servers = $storage->loadByProperties(['backend' => 'search_api_solr_multilingual'])) {
      foreach ($servers as $server) {
        $key = 'search_api_solr_multilingual_' . $server->id();
          $requirements[$key] = [
          'title' => t('Multilingual Solr Server'),
          'value' => t('Schema complete'),
          'severity' => REQUIREMENT_OK,
          'description' => t('Schema on server <a href=":url">@server</a> contains all required language-specific fields.', [
            ':url' => $server->toUrl('canonical')->toString(),
            '@server' => $server->label(),
          ]),
        ];

        /** @var \Drupal\search_api_solr_multilingual\SolrMultilingualBackendInterface $backend */
        $backend = $server->getBackend();
        if ($backend->ping()) {
          $stats = $backend->getSchemaLanguageStatistics();
          if ($missing_languages = array_filter($stats, function ($state) { return !$state; })) {
            $requirements[$key]['value'] = t('Schema incomplete');
            $requirements[$key]['severity'] = $backend->hasLanguageUndefinedFallback() ? REQUIREMENT_WARNING : REQUIREMENT_ERROR;
            $requirements[$key]['description'] = t(
                'There are some language-specific field types missing in schema of Solr server <a href=":url">@server</a>: @languages.', [
                ':url' => $server->toUrl('canonical')->toString(),
                '@server' => $server->label(),
                '@languages' => implode(', ', array_keys($missing_languages)),
              ]);
          }
        }
        else {
          $requirements[$key]['value'] = t('Not reachable');
          $requirements[$key]['severity'] = REQUIREMENT_ERROR;
          $requirements[$key]['description'] = t(
              'Solr server <a href=":url">@server</a> is not reachable.', [
              ':url' => $server->toUrl('canonical')->toString(),
              '@server' => $server->label(),
            ]);
        }
      }
    }
  }

  return $requirements;
}

/**
 * Fixes erroneous left overs from managed field types in unmanaged field types.
 */
function search_api_solr_multilingual_update_8001() {
  $config_factory = \Drupal::configFactory();
  $has_trusted_data = TRUE;

  $field_tpyes = [
    'search_api_solr_multilingual.solr_field_type.text_de_4_5_0',
    'search_api_solr_multilingual.solr_field_type.text_en_4_5_0',
    'search_api_solr_multilingual.solr_field_type.text_nl_4_5_0',
    'search_api_solr_multilingual.solr_field_type.text_und_4_5_0',
  ];

  foreach ($field_tpyes as $name) {
    $field_type = $config_factory->get($name)->get('field_type');
    foreach ($field_type['analyzers'][1]['filters'] as &$query_filter) {
      if (isset($query_filter['managed'])) {
        $query_filter['synonyms'] = $query_filter['managed'];
        unset($query_filter['managed']);
      }
    }
    $config_factory->getEditable($name)
      ->set('field_type', $field_type)
      ->save($has_trusted_data);
  }
}